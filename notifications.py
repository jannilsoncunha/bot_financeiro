"""
Sistema de Notifica√ß√µes para o Bot de Controle Financeiro
"""

import os
import asyncio
import logging
from datetime import datetime, date, timedelta
from typing import List, Dict
from telegram import Bot
from telegram.error import TelegramError
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from database import DatabaseManager

logger = logging.getLogger(__name__)

class NotificationManager:
    def __init__(self, bot_token: str, mongodb_uri: str):
        """
        Inicializa o gerenciador de notifica√ß√µes.
        
        Args:
            bot_token: Token do bot Telegram
            mongodb_uri: URI de conex√£o com MongoDB
        """
        self.bot = Bot(token=bot_token)
        self.db = DatabaseManager(mongodb_uri)
        self.scheduler = AsyncIOScheduler()
        
    async def send_notification(self, chat_id: int, message: str):
        """
        Envia uma notifica√ß√£o para um usu√°rio.
        
        Args:
            chat_id: ID do chat do usu√°rio
            message: Mensagem a ser enviada
        """
        try:
            await self.bot.send_message(
                chat_id=chat_id,
                text=message,
                parse_mode='Markdown'
            )
            logger.info(f"Notifica√ß√£o enviada para chat_id: {chat_id}")
            
        except TelegramError as e:
            logger.error(f"Erro ao enviar notifica√ß√£o para {chat_id}: {e}")
    
    async def check_due_transactions(self):
        """
        Verifica transa√ß√µes com vencimento pr√≥ximo e envia notifica√ß√µes.
        """
        logger.info("Verificando transa√ß√µes com vencimento pr√≥ximo...")
        
        try:
            # Busca transa√ß√µes com vencimento em 3 dias
            due_transactions = self.db.get_due_transactions(days_ahead=3)
            
            today = date.today()
            
            for transaction in due_transactions:
                user_id = transaction['user_id']
                user = self.db.get_user(user_id)
                
                if not user or not user.get('chat_id'):
                    continue
                
                chat_id = user['chat_id']
                due_date = transaction['due_date']
                days_until_due = (due_date - today).days
                
                # Determina o tipo de notifica√ß√£o
                if days_until_due < 0:
                    # Vencimento atrasado
                    emoji = "üö®"
                    status = f"VENCIDA h√° {abs(days_until_due)} dia(s)"
                    urgency = "URGENTE"
                elif days_until_due == 0:
                    # Vence hoje
                    emoji = "‚ö†Ô∏è"
                    status = "VENCE HOJE"
                    urgency = "ATEN√á√ÉO"
                elif days_until_due <= 1:
                    # Vence amanh√£
                    emoji = "üìÖ"
                    status = "vence AMANH√É"
                    urgency = "LEMBRETE"
                else:
                    # Vence em alguns dias
                    emoji = "üìã"
                    status = f"vence em {days_until_due} dias"
                    urgency = "LEMBRETE"
                
                # Monta a mensagem de notifica√ß√£o
                message = (
                    f"{emoji} *{urgency} - Despesa {status}*\n\n"
                    f"üí∏ *{transaction['category']}*\n"
                    f"üìù {transaction['description']}\n"
                    f"üí∞ Valor: R$ {transaction['value']:.2f}\n"
                    f"üìÖ Vencimento: {due_date.strftime('%d/%m/%Y')}\n"
                    f"üÜî ID: `{str(transaction['_id'])}`\n\n"
                )
                
                if transaction.get('is_installment') and transaction.get('installment_details'):
                    details = transaction['installment_details']
                    message += (
                        f"üí≥ Parcela {details['current_installment']}/{details['total_installments']} "
                        f"(R$ {details['installment_value']:.2f})\n\n"
                    )
                
                if days_until_due < 0:
                    message += "‚ö° *A√ß√£o necess√°ria:* Marque como paga usando /pagar ou atualize o vencimento."
                else:
                    message += "üí° *Dica:* Use /pagar para marcar como paga quando efetuar o pagamento."
                
                await self.send_notification(chat_id, message)
                
                # Pequena pausa entre notifica√ß√µes para evitar spam
                await asyncio.sleep(0.5)
        
        except Exception as e:
            logger.error(f"Erro ao verificar transa√ß√µes com vencimento: {e}")
    
    async def send_daily_summary(self):
        """
        Envia resumo di√°rio para usu√°rios que possuem transa√ß√µes.
        """
        logger.info("Enviando resumos di√°rios...")
        
        try:
            # Busca todos os usu√°rios que t√™m transa√ß√µes
            users_with_transactions = self.db.transactions.distinct("user_id")
            
            for user_id in users_with_transactions:
                user = self.db.get_user(user_id)
                if not user or not user.get('chat_id'):
                    continue
                
                chat_id = user['chat_id']
                
                # Busca transa√ß√µes abertas do usu√°rio
                open_transactions = self.db.get_transactions(
                    user_id, status="aberto"
                )
                
                if not open_transactions:
                    continue
                
                # Conta transa√ß√µes por tipo
                receitas_abertas = [t for t in open_transactions if t['type'] == 'receita']
                despesas_abertas = [t for t in open_transactions if t['type'] == 'despesa']
                
                # Calcula valores
                valor_receitas = sum(t['value'] for t in receitas_abertas)
                valor_despesas = sum(t['value'] for t in despesas_abertas)
                
                # Busca despesas com vencimento hoje
                today = date.today()
                vencendo_hoje = [
                    t for t in despesas_abertas 
                    if t.get('due_date') == today
                ]
                
                # Monta mensagem do resumo
                message = (
                    f"üåÖ *Resumo Di√°rio - {today.strftime('%d/%m/%Y')}*\n\n"
                    f"üìä *Transa√ß√µes Abertas:*\n"
                    f"üìà Receitas: {len(receitas_abertas)} (R$ {valor_receitas:.2f})\n"
                    f"üí∏ Despesas: {len(despesas_abertas)} (R$ {valor_despesas:.2f})\n\n"
                )
                
                if vencendo_hoje:
                    message += (
                        f"‚ö†Ô∏è *{len(vencendo_hoje)} despesa(s) vencem hoje:*\n"
                    )
                    for t in vencendo_hoje[:3]:  # Mostra at√© 3 despesas
                        message += f"‚Ä¢ {t['category']}: R$ {t['value']:.2f}\n"
                    
                    if len(vencendo_hoje) > 3:
                        message += f"‚Ä¢ ... e mais {len(vencendo_hoje) - 3}\n"
                    
                    message += "\n"
                
                message += (
                    "üí° *Dicas:*\n"
                    "‚Ä¢ Use /listar para ver todas as transa√ß√µes\n"
                    "‚Ä¢ Use /pagar para marcar despesas como pagas\n"
                    "‚Ä¢ Use /relatorio para ver o resumo mensal"
                )
                
                await self.send_notification(chat_id, message)
                await asyncio.sleep(1)  # Pausa entre usu√°rios
        
        except Exception as e:
            logger.error(f"Erro ao enviar resumos di√°rios: {e}")
    
    async def send_weekly_report(self):
        """
        Envia relat√≥rio semanal para usu√°rios ativos.
        """
        logger.info("Enviando relat√≥rios semanais...")
        
        try:
            # Busca usu√°rios que tiveram atividade na √∫ltima semana
            week_ago = datetime.utcnow() - timedelta(days=7)
            
            recent_users = self.db.transactions.distinct(
                "user_id",
                {"created_at": {"$gte": week_ago}}
            )
            
            for user_id in recent_users:
                user = self.db.get_user(user_id)
                if not user or not user.get('chat_id'):
                    continue
                
                chat_id = user['chat_id']
                
                # Busca transa√ß√µes da semana
                weekly_transactions = self.db.transactions.find({
                    "user_id": user_id,
                    "created_at": {"$gte": week_ago}
                })
                
                weekly_transactions = list(weekly_transactions)
                
                if not weekly_transactions:
                    continue
                
                # Calcula estat√≠sticas da semana
                receitas = [t for t in weekly_transactions if t['type'] == 'receita']
                despesas = [t for t in weekly_transactions if t['type'] == 'despesa']
                
                valor_receitas = sum(t['value'] for t in receitas)
                valor_despesas = sum(t['value'] for t in despesas)
                saldo_semanal = valor_receitas - valor_despesas
                
                # Categoria mais usada
                categorias = {}
                for t in weekly_transactions:
                    cat = t['category']
                    categorias[cat] = categorias.get(cat, 0) + 1
                
                categoria_top = max(categorias.items(), key=lambda x: x[1]) if categorias else None
                
                # Monta relat√≥rio
                today = date.today()
                week_start = today - timedelta(days=7)
                
                message = (
                    f"üìä *Relat√≥rio Semanal*\n"
                    f"üìÖ {week_start.strftime('%d/%m')} - {today.strftime('%d/%m/%Y')}\n\n"
                    f"üìà Receitas: R$ {valor_receitas:.2f} ({len(receitas)})\n"
                    f"üí∏ Despesas: R$ {valor_despesas:.2f} ({len(despesas)})\n"
                    f"üí∞ Saldo: R$ {saldo_semanal:.2f}\n"
                    f"üìã Total: {len(weekly_transactions)} transa√ß√µes\n\n"
                )
                
                if categoria_top:
                    message += f"üèÜ Categoria mais usada: *{categoria_top[0]}* ({categoria_top[1]}x)\n\n"
                
                if saldo_semanal > 0:
                    message += "‚úÖ Parab√©ns! Saldo positivo na semana!"
                elif saldo_semanal < 0:
                    message += "‚ö†Ô∏è Aten√ß√£o! Despesas superaram receitas."
                else:
                    message += "‚öñÔ∏è Receitas e despesas equilibradas."
                
                await self.send_notification(chat_id, message)
                await asyncio.sleep(1)
        
        except Exception as e:
            logger.error(f"Erro ao enviar relat√≥rios semanais: {e}")
    
    def start_scheduler(self):
        """
        Inicia o agendador de notifica√ß√µes.
        """
        # Verifica vencimentos todos os dias √†s 9:00
        self.scheduler.add_job(
            self.check_due_transactions,
            CronTrigger(hour=9, minute=0),
            id='check_due_transactions',
            replace_existing=True
        )
        
        # Envia resumo di√°rio √†s 8:00
        self.scheduler.add_job(
            self.send_daily_summary,
            CronTrigger(hour=8, minute=0),
            id='daily_summary',
            replace_existing=True
        )
        
        # Envia relat√≥rio semanal √†s segundas-feiras √†s 10:00
        self.scheduler.add_job(
            self.send_weekly_report,
            CronTrigger(day_of_week='mon', hour=10, minute=0),
            id='weekly_report',
            replace_existing=True
        )
        
        # Verifica vencimentos tamb√©m √†s 18:00 (segundo lembrete)
        self.scheduler.add_job(
            self.check_due_transactions,
            CronTrigger(hour=18, minute=0),
            id='check_due_transactions_evening',
            replace_existing=True
        )
        
        self.scheduler.start()
        logger.info("Agendador de notifica√ß√µes iniciado!")
    
    def stop_scheduler(self):
        """
        Para o agendador de notifica√ß√µes.
        """
        if self.scheduler.running:
            self.scheduler.shutdown()
            logger.info("Agendador de notifica√ß√µes parado!")

async def main():
    """
    Fun√ß√£o principal para testar o sistema de notifica√ß√µes.
    """
    from dotenv import load_dotenv
    load_dotenv()
    
    notification_manager = NotificationManager(
        bot_token=os.getenv('TELEGRAM_BOT_TOKEN'),
        mongodb_uri=os.getenv('MONGODB_URI')
    )
    
    # Inicia o agendador
    notification_manager.start_scheduler()
    
    try:
        # Mant√©m o programa rodando
        while True:
            await asyncio.sleep(60)
    except KeyboardInterrupt:
        logger.info("Parando sistema de notifica√ß√µes...")
        notification_manager.stop_scheduler()

if __name__ == '__main__':
    asyncio.run(main())

